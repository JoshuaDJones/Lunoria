// <auto-generated />
using System;
using Eldoria.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eldoria.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251019130428_sceneCharacterItem")]
    partial class sceneCharacterItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Eldoria.Core.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlternateFormId")
                        .HasColumnType("int");

                    b.Property<int?>("BowAttackDamage")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsEnemy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNPC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayer")
                        .HasColumnType("bit");

                    b.Property<int>("MaxHp")
                        .HasColumnType("int");

                    b.Property<int>("MaxInventory")
                        .HasColumnType("int");

                    b.Property<int>("MaxMp")
                        .HasColumnType("int");

                    b.Property<int?>("MeleeAttackDamage")
                        .HasColumnType("int");

                    b.Property<int>("Movement")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlternateFormId")
                        .IsUnique()
                        .HasFilter("[AlternateFormId] IS NOT NULL");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.CharacterSpell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SpellId");

                    b.ToTable("CharacterSpells");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("HpEffect")
                        .HasColumnType("int");

                    b.Property<int>("MpEffect")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Journey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Journeys");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.JourneyCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMp")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlternateForm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDown")
                        .HasColumnType("bit");

                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("JourneyId");

                    b.ToTable("JourneyCharacters");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.JourneyCharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("JourneyCharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("JourneyCharacterId");

                    b.ToTable("JourneyCharacterItems");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Scene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("GridUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("JourneyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("Scenes");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("int");

                    b.Property<int>("CurrentMp")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlternateForm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDown")
                        .HasColumnType("bit");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneCharacters");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneCharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SceneCharacterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SceneCharacterId");

                    b.ToTable("SceneCharacterItems");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneDialog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dialog")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SceneId");

                    b.ToTable("SceneDialogs");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamageEffect")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("HealthEffect")
                        .HasColumnType("int");

                    b.Property<bool>("IsRadius")
                        .HasColumnType("bit");

                    b.Property<int?>("MagicEffect")
                        .HasColumnType("int");

                    b.Property<int>("MpCost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Character", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Character", "AlternateForm")
                        .WithOne()
                        .HasForeignKey("Eldoria.Core.Entities.Character", "AlternateFormId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AlternateForm");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.CharacterSpell", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Character", "Character")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eldoria.Core.Entities.Spell", "Spell")
                        .WithMany("CharacterSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Journey", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.User", "User")
                        .WithMany("Journeys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.JourneyCharacter", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eldoria.Core.Entities.Journey", "Journey")
                        .WithMany("JourneyCharacters")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.JourneyCharacterItem", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Item", "Item")
                        .WithMany("JourneyCharacterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eldoria.Core.Entities.JourneyCharacter", "JourneyCharacter")
                        .WithMany("JourneyCharacterItems")
                        .HasForeignKey("JourneyCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("JourneyCharacter");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Scene", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Journey", "Journey")
                        .WithMany("Scenes")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneCharacter", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eldoria.Core.Entities.Scene", "Scene")
                        .WithMany("SceneCharacters")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneCharacterItem", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Item", "Item")
                        .WithMany("SceneCharacterItems")
                        .HasForeignKey("SceneCharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eldoria.Core.Entities.SceneCharacter", "SceneCharacter")
                        .WithMany("SceneCharacterItems")
                        .HasForeignKey("SceneCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SceneCharacter");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneDialog", b =>
                {
                    b.HasOne("Eldoria.Core.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Eldoria.Core.Entities.Scene", "Scene")
                        .WithMany("SceneDialogs")
                        .HasForeignKey("SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Scene");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Character", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Item", b =>
                {
                    b.Navigation("JourneyCharacterItems");

                    b.Navigation("SceneCharacterItems");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Journey", b =>
                {
                    b.Navigation("JourneyCharacters");

                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.JourneyCharacter", b =>
                {
                    b.Navigation("JourneyCharacterItems");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Scene", b =>
                {
                    b.Navigation("SceneCharacters");

                    b.Navigation("SceneDialogs");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.SceneCharacter", b =>
                {
                    b.Navigation("SceneCharacterItems");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.Spell", b =>
                {
                    b.Navigation("CharacterSpells");
                });

            modelBuilder.Entity("Eldoria.Core.Entities.User", b =>
                {
                    b.Navigation("Journeys");
                });
#pragma warning restore 612, 618
        }
    }
}
